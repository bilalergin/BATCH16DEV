Yaptığımız testi doğrulamak için System.assert Equals(beklenenDeğer,  gerçekleşenDeğer) gibi System Class methodlarını kullanırız. 

"Test işlemlerinde hali hazırda org'da bulunan record'ları kullanmayız, test sırasında DML işlemi sonucu recordlar sanal olarak oluşturulur. Test işlemi bu sanal record'lar vasıtasıyla yapılır.
DML işlemlerini test ederken, ilgili class ve method çağırılır. Test sırasında bir DML işlemi olup olmadığını kontrol etmek için test method'unda SOQL yapılır."

TestSetup: Class'daki tüm test method'ları için kullanılabilen ortak test record'ları oluşturmak için kullanılır. Böylelikle test datalarımızı her method için ayrı ayrı oluşturmamıza gerek kalmaz.

1.adım:Eğer methodumuz databaseden record çekip kullanıyorsa test methodunda sanal database hazırlıyoruz.
2.adım:test etmek istediğimiz methodu çağırıyoruz.Eğer trigger ise onu tetikleyecek DML işlemini yapacağız.
3.adım:Kodumuz beklendiği gibi çalışıp çalışmadığını system.assert methodlarıyla kontrol ediyoruz.
kodumuzun en az %75 code coverage olması lazım ama biz %90 a hatta mümkünde %100  e odaklanmalıyız.

Test ortamında database e ulaşamayız ama bütün class,trigger,flow.. herşeye ulaşabiliriz.Yaptığınız herhangi bir dml ilgili triggerları tetikler.

StartTest ve stopTest governor limitleri sıfırlamızı sağlar. Böylelikle test sırasında limitlere takılma olasılığımız azalmış olur. 
Her test method'u için bir kere kullanılabilir.
ASYNC methodları test ederken StartTest() ve stopTest() kullanmak zorundayız

Asynchronous: Senkron olmayan anlamına gelir.
Apex de hatırlarsanız şu ana kadar her işlemin bir sırası olduğunu öğrendik ve Order of execution la her işlemin hangi sırada olduğunu gözlemledik.
sıra ile çalışır derken class içinde bile kodlarımız yazdığımız sıra ile çalışıyor. Mesela önce boş liste instance üretiyoruz. sonra ona eleman ekliyoruz. sonra insert edebiliyoruz. Bunların sırası karışsa işlem istediğimiz gibi olmaz.
Ama sıralamayı beklemesini istemediğimiz bir takım işlemler olabilir.
İşte bu süreçleri Asynchronous yöntemlerle yaptırabiliriz.

Future Method: Sistem kaynakları müsait olunca çalışan ashenkron method'tur. 
Future Method;
Static olmalıdır.
Return type void olmalıdır.
Parametre olarak primitive data türleri ve bunların listelerini alabilir.
sObject'leri veya Object'leri parametre olarak alamaz.

@Future Methodun Çalışma Mantığı
Çamaşır makinesini çalıştırdığımızda sular kesikse siz başlat dediğinizde çalışmaz ama sular gelince kendisi otomatik çalışır ve biter.
future da böyle sistem kaynakları müsait olduğunda diğer sıralı işlemleri beklemeden çalışır.

Async Apex
    - Running behind the scenes.
    - 4 types.
        - future, batch, queueable, schedulable

Future
    - @future -- annotate method with this annotation
    - static. 
    - void only (nothing returns)
    - parameters? 
        - no sObject. No list<sObject>
        - only primitive, or collection of primitive datatype
        how many parameters we can have in future method? (trick)
            - any number
            - ideal is less than 6 (for any method)
    - cannot call future method from future method (directly or indirectly)
        - inserting department
            - department Trigger
                - department handler future method
                    -insert employee
                        - Employee trigger execution
                            - calling another future method

Test Future
    - startTest and StopTest are mandatory.

Interface
    - What? methods in interface does not have any body (just method signature)
    - Method cannot be implemented in interface.
    - Class implements interfaces
        - the implemntor class MUST implement all the methods declared in interface.

Batch apex:
    - Why? why?
        - want to update huge number of records we use batch.
        - not only records, it can be any other limits
            - ex: 10k records to update max. 10 sec CPU time. 6 MB heap size
            - 50k update
                - write a batch. 5k record at once. 10 times batch execution.
            - 1000 records -> it is consuming 3 mins
                - Process 200 records at a time.
    - Database.batchabe is interface
            ex 
                 - 1000 records -> it is consuming 3 mins
                - Process 200 records at a time.
        - start
            - run only when batch starts. we do soql query here.
        - execute
            - 5 times execution. For each 200 records execute will execute.
                - if one of them fails, others can be successful.
                - new gov limits for each execution.
        - finish
            - executes at the end. Only Once.
        - database.stateful
            - retains value of all execution throughout the batch execution

        Test class for Batch Jobs
            - prepare data
            - execute batch in between start test and stop test for sure
            - tiny thing to take care of: we should NOT divide data when write test for batch.

    Queueable
            - similar to future, a little advanced version
                - we write it like batch
            - we can chain jobs.
            - we can get job id to monitor progress
            - we can pass all datatypes, including sObjects.
            - queueable is interface
                - execute method is mandatory